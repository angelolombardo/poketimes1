{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/About.js","hoc/rainbow.js","components/Contact.js","components/Post.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","Navbar","className","href","to","Home","posts","this","props","postList","length","map","post","key","id","src","Pokeball","alt","title","body","Component","connect","state","Rainbow","WrappedComponent","Math","floor","random","Contact","Post","handleClick","deletePost","history","push","onClick","ownProps","match","params","post_id","find","dispatch","type","App","path","component","About","Boolean","window","location","hostname","initState","rootReducer","action","newPost","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f51a3eb0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n    \r\n    return(\r\n    <nav className=\"nav-wrapper red darken-3\">\r\n        <div className=\"container\">\r\n            <a href=\"/home\" className=\"brand-logo\">Poke'Times</a>\r\n            <ul className=\"right\">\r\n                <li><Link to=\"/home\">Home</Link></li>\r\n                <li><NavLink to=\"/about\">About</NavLink></li>\r\n                <li><Link to=\"/contact\">Contact</Link></li>\r\n                \r\n            </ul>\r\n        </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","    import React, {Component} from 'react'\r\n    import {Link} from 'react-router-dom'\r\n    import Pokeball from '../pokeball.png'\r\n    import {connect} from 'react-redux' //connect to store\r\n\r\n\r\n    class Home extends Component{\r\n        render(){\r\n            const {posts} = this.props;\r\n\r\n            const postList = posts.length ? (\r\n                posts.map(post => {\r\n                    return(\r\n                        <div className=\"post card\" key={post.id}>\r\n                            <img src={Pokeball}alt=\"a Pokeball\"/>\r\n                        <div className=\"card-content\">\r\n                        <Link to={'/'+post.id}>\r\n                        <span className=\"card-title red-text\">{post.title}</span>\r\n                        </Link>\r\n                        <p className=\"\">{post.body}</p>\r\n                        </div>\r\n                        </div>\r\n                        )\r\n                    })\r\n                    ) : (\r\n                        <div className=\"center\">No posts yet</div>\r\n                        )\r\n                        return(\r\n                            <div className=\"container\">\r\n                            <h4 className=\"center\">Home</h4>\r\n                            {postList}\r\n                            </div>\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                    const mapStatetoProps = (state) => {\r\n                        return{\r\n                            posts:state.posts //different properties added\r\n                        }\r\n                    }\r\n\r\nexport default connect(mapStatetoProps)(Home)  ","import React from 'react'\r\nimport Rainbow from '../hoc/rainbow'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">About</h4>\r\n            <p className=\"\">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nam neque dicta in aut placeat natus sint obcaecati beatae! Atque temporibus voluptas incidunt saepe nemo repudiandae itaque molestias tempore aliquid? Officia!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rainbow(About)","import React from 'react'\r\n\r\nconst Rainbow = (WrappedComponent) => { \r\n\r\nconst colours = ['red','pink','orange','blue', 'green','yellow'];\r\nconst randomColour = colours[Math.floor(Math.random()*5)] //floor is used to get rid of the decimals\r\n\r\n\r\nconst className = randomColour + '-text' // piink-text, blue-text, etc...\r\n\r\nreturn (props) =>{\r\n    return(\r\n        <div className={className}>  {/* class name is from the css thingy */}\r\n            <WrappedComponent{...props}/> \r\n            \r\n        </div> \r\n        \r\n    )\r\n    \r\n}\r\n}\r\n\r\nexport default Rainbow","import React from 'react'\r\n\r\nconst Contact = (props) => {  //if we add props router sends some functions that can be used\r\n\r\n    // setTimeout(() => {\r\n    //     props.history.push('/about') //after 2 seconds it wil redirect to contact\r\n    // }, 2000)\r\n    return (\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">Contact</h4>\r\n            <p className=\"\">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nam neque dicta in aut placeat natus sint obcaecati beatae! Atque temporibus voluptas incidunt saepe nemo repudiandae itaque molestias tempore aliquid? Officia!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React, {Component} from \"react\"\r\nimport {connect} from 'react-redux'\r\nimport {deletePost} from '../actions/postActions'\r\n\r\nclass Post extends Component {\r\n    handleClick = () => {\r\n        this.props.deletePost(this.props.post.id)\r\n        this.props.history.push('/home') //redirect to home page\r\n    }\r\n    render() {\r\n\r\n        const post = this.props.post ? (\r\n            <div className=\"post\">\r\n                <h4 className=\"center\">{this.props.post.title}</h4>\r\n        <p>{this.props.post.body}</p>\r\n            <div className=\"center\">\r\n                <button className=\"btn grey\" onClick={this.handleClick}>\r\n                    delete Post\r\n                </button>\r\n            </div>\r\n            </div>\r\n        ):(\r\n            <div className=\"center\">Loading post...</div>\r\n        )        \r\n        return(\r\n            <div className=\"container\">\r\n                {post}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    let id = ownProps.match.params.post_id\r\n    return{\r\n        post: state.posts.find(post => post.id===id)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        deletePost: (id) => {dispatch(deletePost(id))}\r\n        }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Post)","export const deletePost = (id) => {\r\n    return{\r\n        type: 'DELETE_POST',id\r\n    }\r\n}","  import React, { Component } from 'react';\n  import Navbar from './components/Navbar'\n  import {BrowserRouter, Route, Switch} from 'react-router-dom'\n  import Home from './components/Home'\n  import About from './components/About'\n  import Contact from './components/Contact'\n  import Post from './components/Post'\n\n  class App extends Component {\n    render() {\n      return (\n        <BrowserRouter>\n          <div className=\"App\">\n            <Navbar />\n            <Switch> {/* solves the problem you had to reload all the time */}\n            <Route path='/home' component = {Home} />\n            <Route path='/about' component = {About} />\n            <Route path='/contact' component = {Contact} />\n            <Route path=\"/:post_id\" component={Post}/>\n            </Switch>\n          </div>\n        </BrowserRouter>\n        );\n      }\n    }\n    \n    export default App;\n    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    posts:[\r\n        { id: '1', title: 'Squirtled Laid an egg', body: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sint voluptatibus enim quae, nam fugiat quo deleniti harum atque dolore ipsam natus cumque nemo voluptatum minima sequi itaque dicta maiores numquam.' },\r\n        { id: '2', title: 'Charmander Laid an egg', body: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sint voluptatibus enim quae, nam fugiat quo deleniti harum atque dolore ipsam natus cumque nemo voluptatum minima sequi itaque dicta maiores numquam.' },   \r\n        { id: '3', title: 'Helix fossil was found', body:'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sint voluptatibus enim quae, nam fugiat quo deleniti harum atque dolore ipsam natus cumque nemo voluptatum minima sequi itaque dicta maiores numquam.'},\r\n    ]\r\n\r\n}\r\n\r\nconst rootReducer = (state=initState,action) => {\r\n    if(action.type === 'DELETE_POST'){\r\n        let newPost = state.posts.filter(post => {\r\n            return action.id !== post.id\r\n        });\r\n        return{\r\n            ...state,\r\n            posts: newPost\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux'\nimport{Provider} from 'react-redux'\nimport rootReducer from'./reducers/rootReducer'\n\nconst store = createStore(rootReducer); //creates the reducer\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* allows access of the store to the application */}\n    <Provider store={store}><App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}